# Services:
# - db: PostgreSQL with a healthcheck
# - app: HarborWatch Spring Boot app, depends on db health

services:
  db:
    image: postgres:15-alpine
    container_name: hw-db
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      TZ: Asia/Kolkata        # OS-level timezone (optional, helps logs/tools)
      PGTZ: Asia/Kolkata      # helps some client libs; primary control is V2 migration above
    ports:
      - "5432:5432"               # expose for local dev tools
    healthcheck:                   # ensure app waits until DB ready
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - hw-net

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hw-app
    depends_on:
      db:
        condition: service_healthy  # wait for DB health before starting
    environment:
      # App reads these in application.yml via ${...}
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/appdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres123
      TZ: Asia/Kolkata
      JAVA_OPTS: -Duser.timezone=Asia/Kolkata -XX:MaxRAMPercentage=75
    ports:
      - "8080:8080"               # host:container
    restart: unless-stopped
    networks:
      - hw-net
    mem_limit: 1024m          # effective in docker compose
    cpus: "1.0"               # cap to 1 CPU
    healthcheck:
      test: [ "CMD", "curl", "-fsS", "http://localhost:8080/actuator/health/readiness" ]
      interval: 30s
      timeout: 10s
      retries: 3

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: hw-cadvisor
    privileged: true                  # lets cAdvisor read cgroups/kmsg cleanly
    ports:
      - "8085:8080"                   # UI: http://localhost:8085
    volumes:
      - /:/rootfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/sys:ro
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
      - /var/lib/docker:/var/lib/docker:ro   # your Docker Root Dir
      - /etc/machine-id:/etc/machine-id:ro   # quiets UUID warning
      - /var/lib/dbus/machine-id:/var/lib/dbus/machine-id:ro
      - /dev/kmsg:/dev/kmsg:ro               # enables OOM events source (optional)
    command:
      - --docker_only=true
      - --housekeeping_interval=10s
      - --store_container_labels=false
      - --housekeeping_interval=1s          # collect every 1 second
      - --max_housekeeping_interval=1s      # donâ€™t back off
      - --allow_dynamic_housekeeping=false  # keep interval fixed
    restart: unless-stopped
    networks:
      - hw-net

  node_exporter:
    image: prom/node-exporter:v1.8.1
    container_name: hw-node-exporter
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    restart: unless-stopped
    networks:
      - hw-net
  
  blackbox:
    image: prom/blackbox-exporter:v0.25.0
    container_name: hw-blackbox
    ports:
      - "9115:9115"
    volumes:
      - ./monitoring/blackbox.yml:/etc/blackbox_exporter/config.yml:ro
    restart: unless-stopped
    networks:
      - hw-net

  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: hw-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerts.yml:/etc/prometheus/alerts.yml:ro
    depends_on:
      - app
      - cadvisor
      - node_exporter
      - blackbox
    restart: unless-stopped
    networks:
      - hw-net

  alertmanager:
    build:
      context: ./monitoring
      dockerfile: Alertmanager.Dockerfile
    container_name: hw-alertmanager
    ports:
      - "9093:9093"
    environment:
      # Compose reads these from your .env automatically
      ALERT_FROM: ${ALERT_FROM}
      ALERT_TO: ${ALERT_TO}
      SES_REGION: ${SES_REGION}
      SES_SMTP_USER: ${SES_SMTP_USER}
      SES_SMTP_PASS: ${SES_SMTP_PASS}
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - hw-net

  grafana:
    image: grafana/grafana:10.4.6
    container_name: hw-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks: [ hw-net ]

  # Optional: ephemeral k6 runner (mounts scripts; run with `docker compose run k6 run ...`)
  k6:
    image: grafana/k6:0.51.0
    container_name: hw-k6
    working_dir: /scripts
    entrypoint: [ "sleep", "infinity" ]
    volumes:
      - ./k6:/scripts:ro
    networks: [ hw-net ]

networks:
  hw-net:
    driver: bridge

volumes:
  pgdata:
